const { Cateexploitaion,Detailchargevehicule }=require('../models/relations')
const Joi = require('joi');

module.exports ={
    ajoute:async(req, res)=>{
        try {
          
            const schema = Joi.object({
               
                
                DateOperation: Joi.date().required().messages({
                    "any.required": `Date operation est obligatoire`,
                    "date.base":'invalid date format',

                  }),
                DateDebutValidite: Joi.date().required().messages({
                    "any.required": `Date debut validite est obligatoire`,
                    "date.base":'invalid date format',

                  }),
                DateFinValidite: Joi.date().required().messages({
                    "any.required": `Date fin validite est obligatoire`,
                    "date.base":'invalid date format',

                  }),
              
                Montant:Joi.number().required().messages({
                    "any.required": `Montant est obligatoire`
                  }),

               }).options({ allowUnknown: true })
               const { error, value } = schema.validate(req.body);
               if (error) {
                 return res.json({msg:error.message})
                 // on fail return comma separated errors
                // next(`Validation error: ${error.details.map(x => x.message).join(', ')}`);
             }
              global.CopierCarteexploitation
                        
                        const url = req.protocol + "://" + req.get("host");
                        if (!req.files['CopierCarteexploitation']) {
            
                            this.CopierCarteexploitation = null
            
                        } else {
            
                            this.CopierCarteexploitation = url + "/images/" + req.files['CopierCarteexploitation'][0].filename;
            
                        }
                        const cartereq = {
                            DateOperation: req.body.DateOperation,
                            DateDebutValidite: req.body.DateDebutValidite,
                            DateFinValidite: req.body.DateFinValidite,
                            voitureID: req.body.voitureID,
Montant:req.body.Montant,
                            CopierCarteexploitation: this.CopierCarteexploitation,
                            userID :req.body.userID
                        }
            const cartesave =await Cateexploitaion.create(cartereq)
           if(cartesave){
                const carteresponce =await Cateexploitaion.findAll({where:{
                ID:cartesave.ID
            }})
            res.status(200).json({carte:carteresponce[0] ,ok:true})
           }
           
        } catch (err) {
            res.status(500).json({err:'Erreur au niveau de serveur : ' + err})

        }
    },
    getvisteofonevoiture:async(req,res)=>{
        try {
            const catres= await Cateexploitaion.findAll({where:{
                voitureID:req.params.id
            }})
          
                res.status(200).json({carte:catres})
            
        } catch (err) {
            res.status(500).json({err:'Erreur au niveau de serveur : ' + err})
        }
    },
    delete:async(req,res)=>{
        try {
          await  Cateexploitaion.destroy({where:{ID:req.params.id}})
          res.status(200).json({msg:'Viste supprimée avec succès',ok:true})
        } catch (err) {
            res.status(500).json({err:'Erreur au niveau de serveur : ' + err})

        }
    },
    getone :async(req,res)=>{
        try {
            const carteres =await Cateexploitaion.findOne({where:{ID:req.params.id},include:[Detailchargevehicule]})
            res.status(200).json({carte:carteres})
        } catch (err) {
            res.status(500).json({err:'Erreur au niveau de serveur : ' + err})

        }
    },
    update:async(req,res)=>{
        try {  
            const schema = Joi.object({
               
                
                DateOperation: Joi.date().required().messages({
                    "any.required": `Date operation est obligatoire`,
                    "date.base":'invalid date format',

                  }),
                DateDebutValidite: Joi.date().required().messages({
                    "any.required": `Date debut validite est obligatoire`,
                    "date.base":'invalid date format',

                  }),
                DateFinValidite: Joi.date().required().messages({
                    "any.required": `Date fin validite est obligatoire`,
                    "date.base":'invalid date format',

                  }),
             
                Montant:Joi.number().required().messages({
                    "any.required": `Montant est obligatoire`
                  }),


           }).options({ allowUnknown: true })
           const { error, value } = schema.validate(req.body);
           if (error) {
             return res.json({msg:error.message})
             // on fail return comma separated errors
            // next(`Validation error: ${error.details.map(x => x.message).join(', ')}`);
         } 
            global.CopierCarteexploitation
                        
            const url = req.protocol + "://" + req.get("host");
            if (!req.files['CopierCarteexploitation']) {

                this.CopierCarteexploitation = req.body.CopierCarteexploitation

            } else {

                this.CopierCarteexploitation = url + "/images/" + req.files['CopierCarteexploitation'][0].filename;

            }
            const cartereq = {
                DateOperation: req.body.DateOperation,
                DateDebutValidite: req.body.DateDebutValidite,
                DateFinValidite: req.body.DateFinValidite,
                Montant:req.body.Montant,

                voitureID: req.body.voitureID,

                CopierCarteexploitation: this.CopierCarteexploitation,
                userID :req.body.userID
            }
const carteesave =await Cateexploitaion.update(cartereq,{where:{ID:req.params.id}})
if(carteesave){
    const carteresponce =await Cateexploitaion.findAll({where:{
    ID:req.params.id
}})
res.status(200).json({carte:carteresponce[0] ,ok:true})
}

        } catch (err) {
            res.status(500).json({err:'Erreur au niveau de serveur : ' + err})

        }
    }
}